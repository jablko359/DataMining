//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/szko³a/4rok/Kompilator/Horzyk\Query.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class QueryParser : Parser {
	public const int
		LOGIC=1, OPERATOR=2, EQUALS=3, LEFTBRACKET=4, RIGHTBRACKET=5, NUMBER=6, 
		QUOTEDSTRING=7, STRING=8, WS=9;
	public const int
		RULE_query = 0, RULE_expression = 1;
	public static readonly string[] ruleNames = {
		"query", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'='", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LOGIC", "OPERATOR", "EQUALS", "LEFTBRACKET", "RIGHTBRACKET", "NUMBER", 
		"QUOTEDSTRING", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public QueryParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class QueryContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LEFTBRACKET() { return GetToken(QueryParser.LEFTBRACKET, 0); }
		public QueryContext[] query() {
			return GetRuleContexts<QueryContext>();
		}
		public QueryContext query(int i) {
			return GetRuleContext<QueryContext>(i);
		}
		public ITerminalNode RIGHTBRACKET() { return GetToken(QueryParser.RIGHTBRACKET, 0); }
		public ITerminalNode LOGIC() { return GetToken(QueryParser.LOGIC, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		return query(0);
	}

	private QueryContext query(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		QueryContext _localctx = new QueryContext(Context, _parentState);
		QueryContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_query, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			switch (TokenStream.La(1)) {
			case STRING:
				{
				State = 5; expression();
				}
				break;
			case LEFTBRACKET:
				{
				State = 6; Match(LEFTBRACKET);
				State = 7; query(0);
				State = 8; Match(RIGHTBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 17;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QueryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_query);
					State = 12;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 13; Match(LOGIC);
					State = 14; query(3);
					}
					} 
				}
				State = 19;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public ITerminalNode OPERATOR() { return GetToken(QueryParser.OPERATOR, 0); }
		public ITerminalNode QUOTEDSTRING() { return GetToken(QueryParser.QUOTEDSTRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(QueryParser.NUMBER, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 26;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20; Match(STRING);
				State = 21; Match(OPERATOR);
				State = 22; Match(QUOTEDSTRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 23; Match(STRING);
				State = 24; Match(OPERATOR);
				State = 25; Match(NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return query_sempred((QueryContext)_localctx, predIndex);
		}
		return true;
	}
	private bool query_sempred(QueryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\v\x1F\x4\x2\t\x2"+
		"\x4\x3\t\x3\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\r\n\x2\x3\x2\x3"+
		"\x2\x3\x2\a\x2\x12\n\x2\f\x2\xE\x2\x15\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x5\x3\x1D\n\x3\x3\x3\x2\x3\x2\x4\x2\x4\x2\x2\x1F\x2\f\x3\x2"+
		"\x2\x2\x4\x1C\x3\x2\x2\x2\x6\a\b\x2\x1\x2\a\r\x5\x4\x3\x2\b\t\a\x6\x2"+
		"\x2\t\n\x5\x2\x2\x2\n\v\a\a\x2\x2\v\r\x3\x2\x2\x2\f\x6\x3\x2\x2\x2\f\b"+
		"\x3\x2\x2\x2\r\x13\x3\x2\x2\x2\xE\xF\f\x4\x2\x2\xF\x10\a\x3\x2\x2\x10"+
		"\x12\x5\x2\x2\x5\x11\xE\x3\x2\x2\x2\x12\x15\x3\x2\x2\x2\x13\x11\x3\x2"+
		"\x2\x2\x13\x14\x3\x2\x2\x2\x14\x3\x3\x2\x2\x2\x15\x13\x3\x2\x2\x2\x16"+
		"\x17\a\n\x2\x2\x17\x18\a\x4\x2\x2\x18\x1D\a\t\x2\x2\x19\x1A\a\n\x2\x2"+
		"\x1A\x1B\a\x4\x2\x2\x1B\x1D\a\b\x2\x2\x1C\x16\x3\x2\x2\x2\x1C\x19\x3\x2"+
		"\x2\x2\x1D\x5\x3\x2\x2\x2\x5\f\x13\x1C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
